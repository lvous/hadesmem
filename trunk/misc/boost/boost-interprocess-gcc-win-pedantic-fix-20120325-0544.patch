Index: boost/interprocess/detail/win32_api.hpp
===================================================================
--- boost/interprocess/detail/win32_api.hpp	(revision 77513)
+++ boost/interprocess/detail/win32_api.hpp	(working copy)
@@ -189,6 +189,8 @@
 namespace interprocess  {
 namespace winapi {
 
+typedef void (*dummyfn)();
+
 struct GUID_BIPC
 {
    unsigned long  Data1;
@@ -848,7 +850,7 @@
 extern "C" __declspec(dllimport) int __stdcall SetSecurityDescriptorDacl(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted);
 extern "C" __declspec(dllimport) void *__stdcall LoadLibraryA(const char *);
 extern "C" __declspec(dllimport) int   __stdcall FreeLibrary(void *);
-extern "C" __declspec(dllimport) void *__stdcall GetProcAddress(void *, const char*);
+extern "C" __declspec(dllimport) dummyfn __stdcall GetProcAddress(void *, const char*);
 extern "C" __declspec(dllimport) void *__stdcall GetModuleHandleA(const char*);
 extern "C" __declspec(dllimport) void *__stdcall GetFileInformationByHandle(void *, interprocess_by_handle_file_information*);
 extern "C" __declspec(dllimport) unsigned long __stdcall GetMappedFileNameW(void *, void *, wchar_t *, unsigned long);
@@ -1126,8 +1128,8 @@
 inline bool free_library(void *module)
 {  return 0 != FreeLibrary(module); }
 
-inline void *get_proc_address(void *module, const char *name)
-{  return GetProcAddress(module, name); }
+inline dummyfn get_proc_address(void *module, const char *name)
+{  return (dummyfn)GetProcAddress(module, name); }
 
 inline void *get_current_process()
 {  return GetCurrentProcess();  }
@@ -1178,9 +1180,9 @@
 {
    enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NumFunction };
    enum { NtDll_dll, NumModule };
-
+   
    private:
-   static void *FunctionAddresses[NumFunction];
+   static dummyfn FunctionAddresses[NumFunction];
    static volatile long FunctionStates[NumFunction];
    static void *ModuleAddresses[NumModule];
    static volatile long ModuleStates[NumModule];
@@ -1210,7 +1212,7 @@
       return ModuleAddresses[id];
    }
 
-   static void *get_address_from_dll(const unsigned int id)
+   static dummyfn get_address_from_dll(const unsigned int id)
    {
       assert(id < (unsigned int)NumFunction);
       const char *function[] = { "NtSetInformationFile", "NtQuerySystemInformation", "NtQueryObject" };
@@ -1220,7 +1222,7 @@
    }
 
    public:
-   static void *get(const unsigned int id)
+   static dummyfn get(const unsigned int id)
    {
       assert(id < (unsigned int)NumFunction);
       while(FunctionStates[id] < 2){
@@ -1238,7 +1240,7 @@
 };
 
 template<int Dummy>
-void *function_address_holder<Dummy>::FunctionAddresses[function_address_holder<Dummy>::NumFunction];
+dummyfn function_address_holder<Dummy>::FunctionAddresses[function_address_holder<Dummy>::NumFunction];
 
 template<int Dummy>
 volatile long function_address_holder<Dummy>::FunctionStates[function_address_holder<Dummy>::NumFunction];
