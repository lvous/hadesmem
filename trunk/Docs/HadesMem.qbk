[article HadesMem
  [quickbook 1.5]
  [version 0.0.0]
  [copyright 2011 Joshua Boyce (aka RaptorFactor)]
  [authors [Boyce, Joshua]]
  [license Distributed under the GNU GPL v3. See accompanying file 
    LICENSE.txt.]
]

[section:overview Overview]

[h4 Introduction]

HadesMem is a C++-based memory hacking library for Windows based 
applications, with the goal of providing a safe, generic, powerful, and 
efficient API. All components are useable on remote targets. Furthermore, all 
components compile for (and work natively on) both IA32 and AMD64.

[h4 Design]

HadesMem's design is built around the [classref HadesMem::MemoryMgr MemoryMgr] 
class, which provides all the basic and critical functionality required for 
the other components to be implemented.

In terms of language usage, the library aims to exploit modern C++ as much as 
possible, both to ease implementation, and to make library use as easy and as 
error-safe as possible.

[h4 Error Handling]

Exceptions are typically favoured over error codes. The rationale for this 
is that memory hacking is quite 'unsable' by nature, and most use cases favour 
grouping operations in an 'all or nothing' fashion. By using exceptions, the 
amount of boilerplate code required to use the library is significantly 
reduced.

Exceptions in HadesMem are all derived from [classref HadesMem::HadesMemError], 
which in turn is derived from both `std::exception` and `boost::exception`. 
Internally, exceptions are built and thrown using the 
[@http://www.boost.org/doc/libs/release/libs/exception/doc/boost-exception.html 
Boost.Exception] libary. When dealing with HadesMem exceptions it is 
recommended to use this library, as very little information is available from 
the `std::exception` interface, or the exception class type.

All functions in HadesMem should be considered to throw unless otherwise 
stated in the documentation. Furthermore, all function in HadesMem should 
be considered to offer only the 'basic guarantee' unless otherwise stated 
in the documentation. Work is currently underway to offer the strong or 
no-throw guarantee wherever possible, but is not yet complete. 

[h4 Threading]

Currently no guarantees are made that multiple threads accessing the same 
HadesMem object will work. Typically it should, but until each function is 
reviewed and documented it is recommended to synchronise access to shared 
objects. Work is currently underway to improve the threading guarantees 
offered by the library, but it is not yet complete.

[h4 Support]

Please direct all bug reports and/or feature requests to the issue tracker on 
the [@http://code.google.com/p/hadesmem/ project page]. If you have something 
you would like to discuss in private, or if you have a relatively advanced 
question about the library that can't be answered by looking at the 
documentation or code, I can be reached via email at 
raptorfactor@raptorfactor.com.

[endsect] [/ Overview]

[section:lic License]

This file is part of HadesMem.

HadesMem is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

HadesMem is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with HadesMem.  If not, see [@http://www.gnu.org/licenses/].

[endsect] [/ License]

[section:changes Changes]

Nothing to see here yet.

[endsect] [/ Changes]

[section:building Building]

HadesMem uses the [@http://www.boost.org/boost-build2/ Boost.Build] build 
system. If you have not already, it is recommend you familiarize yourself 
with this framework.

Supported Compilers:

* [@http://www.microsoft.com/visualstudio/en-us Microsoft Visual C++ 2010] 
(Express edition not officially supported)
* [@http://gcc.gnu.org/ GNU GCC 4.6.0] (via 
[@http://www.equation.com/servlet/equation.cmd?fa=fortran MinGW-w64])

Supported Platforms:

* [@http://www.microsoft.com/windows/ Microsoft Windows] (Windows XP SP2 or 
later)

Steps to Build:

# Build Boost.
  # Navigate to Build/Boost.
  # Run Bootstrap.bat.
  # Run Build_Compiler.bat (Substitute 'Compiler' as appropriate).
  # Check output and ensure there are no errors.
# Build HadesMem.
  # Navigate to Build/Full.
  # Run Build_Compiler_Configuration_Architecture.bat (Substitute 'Compiler', 
  'Configuration', and 'Architecture' as appropriate).
  # Check output and ensure there are no errors.
  
Using HadesMem (in a Boost.Build based project):

# Add a /use-project/ directive to your Jamroot targeting HadesMem (this 
document assumes you name the project 'HadesMem').
# Add '''/HadesMem//Memory''' to the source list of your application/library 
or the requirements list of your project.
# Add `#include <HadesMemory/Memory.hpp>` to your code.

[endsect] [/ Building]

[section:reference Reference]

[section:memorymgr MemoryMgr]

[h4 Synopsis]

  // In header: <HadesMemory/MemoryMgr.hpp>

  class MemoryMgr
  {
  public:
    class Error : public virtual HadesMemError 
    { };

    explicit MemoryMgr(DWORD ProcID);

    class RemoteFunctionRet
    {
    public:
      RemoteFunctionRet();
      
      RemoteFunctionRet(DWORD_PTR ReturnValue, DWORD64 ReturnValue64, 
        double ReturnValueFloat, DWORD LastError);
      
      DWORD_PTR GetReturnValue() const;
      
      DWORD64 GetReturnValue64() const;
      
      double GetReturnValueFloat() const;
      
      DWORD GetLastError() const;
    };
  
    enum CallConv
    {
      CallConv_Default, 
      CallConv_CDECL, 
      CallConv_STDCALL, 
      CallConv_THISCALL, 
      CallConv_FASTCALL, 
      CallConv_X64
    };

    RemoteFunctionRet Call(LPCVOID Address, CallConv MyCallConv, 
      std::vector<PVOID> const& Args) const;

    template <typename T>
    T Read(PVOID Address, unspecified = 0) const;

    template <typename T>
    T Read(PVOID Address, std::size_t Size, unspecified = 0) const;

    template <typename T>
    void Write(PVOID Address, T const& Data, unspecified = 0) const;

    bool CanRead(LPCVOID Address) const;

    bool CanWrite(LPCVOID Address) const;

    bool IsGuard(LPCVOID Address) const;
    
    DWORD ProtectRegion(LPVOID Address, DWORD Protect) const;

    PVOID Alloc(SIZE_T Size) const;

    void Free(PVOID Address) const;

    FARPROC GetRemoteProcAddress(HMODULE RemoteMod, 
      std::wstring const& Module, std::string const& Function) const;

    FARPROC GetRemoteProcAddress(HMODULE RemoteMod, 
      std::wstring const& Module, WORD Function) const;

    void FlushCache(LPCVOID Address, SIZE_T Size) const;

    DWORD GetProcessId() const;

    HANDLE GetProcessHandle() const;
    
    std::wstring GetProcessPath() const;
    
    bool IsProcessWoW64() const;
  };

  class AllocAndFree
  {
  public:
    AllocAndFree(MemoryMgr const& MyMemoryMgr, SIZE_T Size);

    ~AllocAndFree();
    
    void Free() const;

    PVOID GetBase() const;
    
    SIZE_T GetSize() const;

  protected:
    AllocAndFree(AllocAndFree const&);
    AllocAndFree& operator=(AllocAndFree const&);
  };

[h4 Description]

The MemoryMgr class provides the most basic memory hacking functionality, and 
is the basis on which all other HadesMem components are built. It exposes APIs 
for memory reading, memory writing, function calling, region querying, memory 
allocation, and instruction cache flushing.

The AllocAndFree class is an RAII wrapper for remote memory allocation and 
freeing.

[h4 MemoryMgr public types]

TODO: Write this!

[h4 MemoryMgr public construct/copy/destruct/move]

TODO: Write this!

[h4 MemoryMgr public member functions]

TODO: Write this!

[h4 AllocAndFree public types]

TODO: Write this!

[h4 AllocAndFree public construct/copy/destruct/move]

TODO: Write this!

[h4 AllocAndFree public member functions]

TODO: Write this!

[endsect] [/ MemoryMgr]

[endsect] [/ Reference]

[section:acknowledge Acknowledgements]

HadesMem would not be possible without the help of the following projects:

* [@http://code.google.com/p/asmjit/ AsmJit]
* [@http://www.beaengine.org/ BeaEngine]
* [@http://www.boost.org/ Boost]

[endsect] [/ Acknowledgements]
