!MESSAGE WARNING WARNING WARNING
!MESSAGE This makefile is currently still under active development. 
!MESSAGE Please use the Boost.Build system to build the library.
!MESSAGE WARNING WARNING WARNING
!MESSAGE

ASMJIT_INC=..\src\asmjit\asmjit\src
ASMJIT_SRC=..\src\asmjit\asmjit\src\asmjit

HADESMEM_SRC=..\src\memory\memory
EXAMPLES_SRC=..\examples
HADESMEM_INC=..\include\memory

!IFNDEF ARCH
!IF ! [ cl 2>&1 | find "x86" > NUL ]
ARCH = x86
!ELSE IF ! [ cl 2>&1 | find "x64" > NUL ]
ARCH = x64
!ELSE
!ERROR Unable to auto-detect toolchain architecture! \
If cl.exe is in your PATH rerun nmake with ARCH=<arch>.
!ENDIF
!ENDIF

!IF "$(ARCH)" == "x86"
PLATFORM_LDFLAGS = /SAFESEH
!ENDIF

MT         = mt.exe
CCNODBG    = cl.exe /nologo /O2 /DNDEBUG
CCDEBUG    = cl.exe /nologo /Od /Gm /Zi /D_DEBUG /RTC1
CWARNINGS  = /W4 /analyze /sdl /WX 
CFLAGS     = $(CFLAGS) /EHsc /fp:precise /c /GS /GR /FD
CFLAGS     = $(CFLAGS) /DWIN32 /D_UNICODE /DUNICODE /D_CRT_SECURE_NO_WARNINGS 
CFLAGS     = $(CFLAGS) /D_SCL_SECURE_NO_WARNINGS /DHADESMEM_MSVC 
CFLAGS     = $(CFLAGS) /DWINVER=_WIN32_WINNT_VISTA 
CFLAGS     = $(CFLAGS) /D_WIN32_WINNT=_WIN32_WINNT_VISTA /D_VARIADIC_MAX=10
CFLAGS     = $(CFLAGS) /DASMJIT_API= 
LDFLAGS    = /LARGEADDRESSAWARE /MANIFEST /NXCOMPAT /DYNAMICBASE
LDFLAGS    = $(LDFLAGS) $(PLATFORM_LDFLAGS)
LNKDLL     = link.exe /DLL
LNKLIB     = link.exe /lib
LNKEXE     = link.exe
LFLAGS     = /nologo /machine:$(ARCH)

CFGSET     = FALSE
!IF "$(OBJDIR)" == ""
OUTDIR = ..\obj\msvc\
!ELSE
OUTDIR = $(OBJDIR)
!ENDIF

!IF "$(RTLIBCFG)" == "static"
RTLIB  = /MT
RTLIBD = /MTd
!ELSE
RTLIB   = /MD
RTLIBD  = /MDd
!ENDIF

DIRBASE = $(OUTDIR)\$(CFG)\$(ARCH)
DIROBJ = $(DIRBASE)\obj
DIRLIB = $(DIRBASE)\lib
DIRINC = $(DIRBASE)\include
DIRBIN = $(DIRBASE)\bin

OUTPUT_DIRS = $(DIRBIN) $(DIRINC) $(DIRLIB) \
  $(DIROBJ)\asmjit \
  $(DIROBJ)\asmjit\core \
  $(DIROBJ)\asmjit\x86 \
  $(DIROBJ)\hadesmem \
  $(DIROBJ)\hadesmem\detail \
  $(DIROBJ)\examples\common \
  $(DIROBJ)\examples\dump \
  $(DIROBJ)\examples\inject \
  $(DIROBJ)\examples\injecttest \
  $(DIROBJ)\examples\injecttestdep
  
ASMJIT_PDBNAME = $(DIROBJ)\asmjit\asmjit.pdb
HADESMEM_PDBNAME = $(DIROBJ)\hadesmem\hadesmem.pdb
EXAMPLES_COMMON_PDBNAME = $(DIROBJ)\examples\common\examples_common.pdb
EXAMPLES_DUMP_PDBNAME = $(DIROBJ)\examples\dump\dump.pdb
EXAMPLES_INJECT_PDBNAME = $(DIROBJ)\examples\inject\inject.pdb
EXAMPLES_INJECTTEST_PDBNAME = $(DIROBJ)\examples\injecttest\injecttest.pdb
EXAMPLES_INJECTTESTDEP_PDBNAME = \
  $(DIROBJ)\examples\injecttestdep\injecttestdep.pdb

# Target configuration
!IF "$(CFG)" == "release"
CC             = $(CCNODBG)
STATICLIBBUILD = TRUE
!ELSE IF "$(CFG)" == "debug"
CC             = $(CCDEBUG)
RTLIB          = $(RTLIBD)
STATICLIBBUILD = TRUE
!ENDIF

!IF "$(STATICLIBBUILD)" == "TRUE"
CC     = $(CC) $(RTLIB)
CFGSET = TRUE
ASMJIT = $(DIRLIB)\asmjit.lib
HADESMEM = $(DIRLIB)\hadesmem.lib
EXAMPLES_COMMON = $(DIRLIB)\examples_common.lib
EXAMPLES_DUMP = $(DIRBIN)\dump.exe
EXAMPLES_INJECT = $(DIRBIN)\inject.exe
EXAMPLES_INJECTTEST = $(DIRBIN)\injecttest.dll
EXAMPLES_INJECTTESTDEP = $(DIRBIN)\injecttestdep.dll
EXAMPLES_ALL = $(EXAMPLES_COMMON) $(EXAMPLES_DUMP) $(EXAMPLES_INJECT) \
 $(EXAMPLES_INJECTTEST) $(EXAMPLES_INJECTTESTDEP)
!ENDIF

HADESMEM_DEPENDENT_LIBS = kernel32.lib user32.lib advapi32.lib shell32.lib \
  shlwapi.lib $(ASMJIT) 

!IF "$(CFGSET)" == "FALSE"
!MESSAGE Usage: nmake /f makefile.vc [CFG=<config>]
!MESSAGE .          [OBJDIR=<path>] [RTLIBCFG=<rtlib>] [<target>]
!MESSAGE
!MESSAGE where <config> is one of:
!MESSAGE -  release                       - release static library
!MESSAGE -  debug                         - debug static library
!MESSAGE
!MESSAGE <target> may be:
!MESSAGE -  clean                         - perform a clean for CFG
!MESSAGE - (empty) or all                 - build all targets for CFG
!MESSAGE
!MESSAGE RTLIBCFG controls the runtime library linkage - 'static' or 'dynamic'.
!MESSAGE OBJDIR is the path where you like to build (obj, bins, etc.),
!MESSAGE   defaults to ..\obj

!IF "$(CFG)" != ""
!MESSAGE
!ERROR please choose a valid configuration instead of "$(CFG)"
!ENDIF

!ENDIF

!IF "$(CFGSET)" == "TRUE"

all: $(HADESMEM) $(ASMJIT) $(EXAMPLES_ALL)

$(HADESMEM): $(OUTPUT_DIRS)
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) /I $(ASMJIT_INC) \
    /Fd$(HADESMEM_PDBNAME) /Fo$(DIROBJ)\hadesmem\ $(HADESMEM_SRC)\*.cpp
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) /I $(ASMJIT_INC) \
    /Fd$(HADESMEM_PDBNAME) /Fo$(DIROBJ)\hadesmem\detail\ \
	$(HADESMEM_SRC)\detail\*.cpp
  $(LNKLIB) $(LFLAGS) /WX /out:$(HADESMEM) $(DIROBJ)\hadesmem\*.obj \
    $(DIROBJ)\hadesmem\detail\*.obj
  -xcopy $(DIROBJ)\hadesmem\*.pdb $(DIRLIB) /y

$(EXAMPLES_COMMON): $(OUTPUT_DIRS)
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) \
    /Fd$(EXAMPLES_COMMON_PDBNAME) /Fo$(DIROBJ)\examples\common\ \
	$(EXAMPLES_SRC)\common\*.cpp
  $(LNKLIB) $(LFLAGS) /WX /out:$(EXAMPLES_COMMON) \
    $(DIROBJ)\examples\common\*.obj
  -xcopy $(DIROBJ)\examples\common\*.pdb $(DIRLIB) /y
  
$(EXAMPLES_DUMP): $(OUTPUT_DIRS) $(HADESMEM) $(EXAMPLES_COMMON)
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) \
    /Fd$(EXAMPLES_DUMP_PDBNAME) /Fo$(DIROBJ)\examples\dump\ \
	$(EXAMPLES_SRC)\dump\*.cpp
  $(LNKEXE) $(LFLAGS) /WX /out:$(EXAMPLES_DUMP) \
    $(DIROBJ)\examples\dump\*.obj $(EXAMPLES_COMMON) $(HADESMEM) \
	$(HADESMEM_DEPENDENT_LIBS)
  -xcopy $(DIROBJ)\examples\dump\*.pdb $(DIRBIN) /y
  
$(EXAMPLES_INJECT): $(OUTPUT_DIRS) $(HADESMEM) $(EXAMPLES_COMMON)
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) \
    /Fd$(EXAMPLES_INJECT_PDBNAME) /Fo$(DIROBJ)\examples\inject\ \
	$(EXAMPLES_SRC)\inject\*.cpp
  $(LNKEXE) $(LFLAGS) /WX /out:$(EXAMPLES_INJECT) \
    $(DIROBJ)\examples\inject\*.obj $(EXAMPLES_COMMON) $(HADESMEM) \
	$(HADESMEM_DEPENDENT_LIBS)
  -xcopy $(DIROBJ)\examples\inject\*.pdb $(DIRBIN) /y
  
$(EXAMPLES_INJECTTEST): $(OUTPUT_DIRS) $(HADESMEM) $(EXAMPLES_COMMON) \
  $(EXAMPLES_INJECTTESTDEP)
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) \
    /Fd$(EXAMPLES_INJECTTEST_PDBNAME) /Fo$(DIROBJ)\examples\injecttest\ \
	$(EXAMPLES_SRC)\injecttest\*.cpp
  $(LNKDLL) $(LFLAGS) /WX /out:$(EXAMPLES_INJECTTEST) \
    $(DIROBJ)\examples\injecttest\*.obj $(EXAMPLES_COMMON) $(HADESMEM) \
	$(HADESMEM_DEPENDENT_LIBS)  $(DIRBIN)\injecttestdep.lib
  -xcopy $(DIROBJ)\examples\injecttest\*.pdb $(DIRBIN) /y
  
$(EXAMPLES_INJECTTESTDEP): $(OUTPUT_DIRS) $(HADESMEM) $(EXAMPLES_COMMON)
  $(CC) $(CFLAGS) $(CWARNINGS) /I $(HADESMEM_INC) \
    /Fd$(EXAMPLES_INJECTTESTDEP_PDBNAME) /Fo$(DIROBJ)\examples\injecttestdep\ \
	$(EXAMPLES_SRC)\injecttestdep\*.cpp
  $(LNKDLL) $(LFLAGS) /WX /out:$(EXAMPLES_INJECTTESTDEP) \
    $(DIROBJ)\examples\injecttestdep\*.obj $(EXAMPLES_COMMON) $(HADESMEM) \
	$(HADESMEM_DEPENDENT_LIBS)
  -xcopy $(DIROBJ)\examples\injecttestdep\*.pdb $(DIRBIN) /y

$(ASMJIT): $(OUTPUT_DIRS)
  $(CC) $(CFLAGS) /I $(ASMJIT_INC) /Fd$(ASMJIT_PDBNAME) \
    /Fo$(DIROBJ)\asmjit\core\ $(ASMJIT_SRC)\core\*.cpp
  $(CC) $(CFLAGS) /I $(ASMJIT_INC) /Fd$(ASMJIT_PDBNAME) \
    /Fo$(DIROBJ)\asmjit\x86\ $(ASMJIT_SRC)\x86\*.cpp
  $(LNKLIB) $(LFLAGS) /ignore:4221 /out:$(ASMJIT) $(DIROBJ)\asmjit\core\*.obj \
    $(DIROBJ)\asmjit\x86\*.obj
  -xcopy $(DIROBJ)\asmjit\*.pdb $(DIRLIB) /y

$(OUTPUT_DIRS):
  @if not exist "$(@)" mkdir "$(@)"

clean::
  @-erase /s $(DIROBJ)\*.dll 2> NUL
  @-erase /s $(DIROBJ)\*.exp 2> NUL
  @-erase /s $(DIROBJ)\*.idb 2> NUL
  @-erase /s $(DIROBJ)\*.lib 2> NUL
  @-erase /s $(DIROBJ)\*.obj 2> NUL
  @-erase /s $(DIROBJ)\*.pch 2> NUL
  @-erase /s $(DIROBJ)\*.pdb 2> NUL
  @-erase /s $(DIROBJ)\*.res 2> NUL

!ENDIF
