import common 
  ;
import virtual-target 
  ;

use-project /Dependencies 
  : 
    Src/Dependencies
  ;
  
use-project /Common 
  : 
    Include/Common 
  ; 
  
use-project /Memory 
  : 
    Src/Memory 
  ; 
   
use-project /Scripting 
  : 
    Src/Scripting
  ; 
  
use-project /Doc 
  : 
    Doc
  ; 
  
project 
  : 
    requirements 
    <define>BOOST_FILESYSTEM_VERSION=3 
    <define>UNICODE 
    <define>_UNICODE 
    <runtime-link>shared 
    <toolset>gcc:<cxxflags>"-std=c++0x" 
    <toolset>gcc:<warnings>off 
    <toolset>gcc:<define>nullptr=NULL 
    <toolset>msvc:<warnings>all 
    <tag>@gentag 
  : 
    default-build debug 
  ;

local rule address-model-tag ( name : type ? : property-set )
{
  local tag = 
    ;
    
  local version = 
    [ 
      $(property-set).get <address-model> 
    ] 
    ;
    
  return $(version) 
    ;
}

rule format-name ( format * : name : type ? : property-set )
{
  local result = "" ;
  for local f in $(format)
  {
    switch $(f:G)
    {
      case <base> :
        result += $(name:B) 
          ;
      
      case <address-model> :
        result += 
        [ 
          join-tag $(f:G=) 
          : 
            [ 
              address-model-tag $(name) 
              : $(type) 
              : $(property-set) 
            ] 
        ] 
        ;

      case * :
        result += $(f:G=) 
          ;
    }
  }
  
  result = 
    [ 
      virtual-target.add-prefix-and-suffix $(result:J=) 
        : $(type) 
        : $(property-set) 
    ] 
    ;
    
  return $(result) 
    ;
}

local rule join-tag ( joiner ? : tag ? )
{
  if ! $(joiner) 
  { 
    joiner = _ 
      ; 
  }
  
  return $(joiner)$(tag) 
    ;
}

rule gentag ( name : type ? : property-set )
{
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB PYTHON_EXTENSION EXE 
  {
    if [ $(property-set).get <address-model> ] != 32 && 
      [ $(property-set).get <address-model> ] != 64 
    {
      ECHO "Error! Could not detect address-model."
        ;
      EXIT
        ;
    }

    local result 
      ;
      
    result = 
      [ 
        format-name <base> <address-model>  
        : $(name) 
        : $(type) 
        : $(property-set) 
      ] 
      ;
      
    return $(result) 
      ;
  } 
}

path-constant TOP 
  : 
    . 
  ;

build-project Src/Memory 
  ;
  
build-project Src/Scripting 
  ;
  
build-project Doc
  ;
  
rule Install-Rule ( properties * ) 
{
  local result 
    ;
  
  if <variant>debug in $(properties)
  {
    if <toolset>gcc in $(properties)
    {
      result += <location>Bin/GCC/Debug 
        ;
    }
    
    if <toolset>msvc in $(properties)
    {
      result += <location>Bin/MSVC/Debug 
        ;
    }
  }
  
  if <variant>release in $(properties)
  {
    if <toolset>gcc in $(properties)
    {
      result += <location>Bin/GCC/Release 
        ;
    }
    
    if <toolset>msvc in $(properties)
    {
      result += <location>Bin/MSVC/Release 
        ;
    }
  }
  
  return $(result) 
    ;
}
  
install Bin 
  : 
    Src/Memory 
    Src/Scripting 
  : 
    <conditional>@Install-Rule 
    <install-dependencies>on 
    <install-type>SHARED_LIB 
    <install-type>EXE 
    <install-type>PYTHON_EXTENSION 
  ;
