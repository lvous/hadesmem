# Import module for Boost support.
import boost
  ;

# Use Boost libraries.
boost.use-project
  ;
 
# Use AsmJit library. 
use-project /asmjit
  :
    src/asmjit
  ;
  
# Use HadesMem library.
use-project /memory
  :
    src/memory
  ;

# Use HadesMem tests.
use-project /tests
  :
    tests
  ;

# Use HadesMem examples.
use-project /examples
  :
    examples
  ;

project
  :
    requirements
    
    # Tell Boost to use windows.h
    <define>BOOST_USE_WINDOWS_H
    
    # Disallow use of deprected Boost APIs.
    <define>BOOST_SYSTEM_NO_DEPRECATED
    <define>BOOST_FILESYSTEM_NO_DEPRECATED
    
    # Enforce strict Windows typedefs.
    <define>STRICT
    
    # Force use of Unicode APIs, entry point, etc.
    <define>UNICODE
    <define>_UNICODE
    
    # Disable warnings about use of 'unsafe' CRT and STL functions.
    <define>_CRT_SECURE_NO_WARNINGS
    <define>_SCL_SECURE_NO_WARNINGS
    
    # Minimum supported OS is Windows Vista
    <define>WINVER=_WIN32_WINNT_VISTA
    <define>_WIN32_WINNT=_WIN32_WINNT_VISTA
    
    # Compile for x86/x64, with static linking to the multi-threaded runtime.
    <architecture>x86
    <threading>multi
    <runtime-link>static
    
    # Disable warning relating to the length of decorated names caused by 
    # some Boost components. This warning can safely be ignored as it does 
    # not affect program correctness.
    <toolset>msvc:<cxxflags>"/wd4503"
    <toolset>intel:<cxxflags>"/Qwd2586"
    # Required for atomics library.
    <toolset>gcc,<address-model>32:<cxxflags>"-march=pentium4"
    # --export-all-symbols is required because of a bug in Clang's dllexport  
    # support. Remove once this has been fixed.
    <toolset>clang:<linkflags>"-Wl,--export-all-symbols"
    # Required for Boost.
    <toolset>clang:<linkflags>"-Wl,--allow-multiple-definition"
    # Enable checks for signed overflow in debug builds
    <toolset>gcc,<variant>debug:<cxxflags>"-ftrapv"
    <toolset>clang,<variant>debug:<cxxflags>"-ftrapv"
    # Enable undefined behaviour checking in debug builds
    <toolset>clang,<variant>debug:<cxxflags>"-fsanitize=undefined -fsanitize=unsigned-integer-overflow"
    
    # Enable C++11 Mode
    <toolset>gcc:<cxxflags>"-std=c++11"
    <toolset>clang:<cxxflags>"-std=c++11"
    <toolset>intel:<cxxflags>"/Qstd=c++11"
    
    # Enable generation of debugging symbols, even under release mode.
    <debug-symbols>on
  :
    # Build under debug mode by default.
    default-build debug
  :
    # Output to 'bin' directory.
    build-dir bin
  ;

# Build HadesMem library.
build-project src/memory
  ;

# Build HadesMem tests.
build-project tests
  ;

# Build HadesMem examples.
build-project examples
  ;

# Install to 'dist' directory.
install dist
  :
    # Install library and examples.
    src/memory
    examples
  :
    # Give each toolset, variant, and architecture combination its own 
    # directory.
    
    <toolset>msvc,<variant>debug,<address-model>32:<location>dist/msvc/debug/x86
    <toolset>msvc,<variant>debug,<address-model>64:<location>dist/msvc/debug/x64
    <toolset>msvc,<variant>release,<address-model>32:<location>dist/msvc/release/x86
    <toolset>msvc,<variant>release,<address-model>64:<location>dist/msvc/release/x64
    
    <toolset>gcc,<variant>debug,<address-model>32:<location>dist/gcc/debug/x86
    <toolset>gcc,<variant>debug,<address-model>64:<location>dist/gcc/debug/x64
    <toolset>gcc,<variant>release,<address-model>32:<location>dist/gcc/release/x86
    <toolset>gcc,<variant>release,<address-model>64:<location>dist/gcc/release/x64
    
    <toolset>clang,<variant>debug,<address-model>32:<location>dist/clang/debug/x86
    <toolset>clang,<variant>debug,<address-model>64:<location>dist/clang/debug/x64
    <toolset>clang,<variant>release,<address-model>32:<location>dist/clang/release/x86
    <toolset>clang,<variant>release,<address-model>64:<location>dist/clang/release/x64
    
    <toolset>intel,<variant>debug,<address-model>32:<location>dist/intel/debug/x86
    <toolset>intel,<variant>debug,<address-model>64:<location>dist/intel/debug/x64
    <toolset>intel,<variant>release,<address-model>32:<location>dist/intel/release/x86
    <toolset>intel,<variant>release,<address-model>64:<location>dist/intel/release/x64
    
    # Automatically pull in dependencies.
    <install-dependencies>on
    
    # Install both EXEs and DLLs.
    <install-type>SHARED_LIB
    <install-type>EXE
  ;

# Allow easy consumption by 3rd parties.
alias hadesmem
  :
    src/memory//memory
  ;
