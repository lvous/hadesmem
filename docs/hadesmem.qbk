[article HadesMem
  [quickbook 1.5]
  [version 2.0.0]
  [copyright 2011-2012 Joshua Boyce]
  [authors [Boyce, Joshua]]
  [license Distributed under the Boost Software License, Version 1.0. (See 
    accompanying file LICENSE_1_0.txt or copy at 
    [@http://www.boost.org/LICENSE_1_0.txt]).]
]

[section:overview Overview]

[h3 Introduction]

HadesMem is a C++-based memory hacking library for Windows based 
applications, with the goal of providing a safe, generic, powerful, and 
efficient API. All components are useable on remote targets. Furthermore, all 
components compile for (and work natively on) both IA32 and AMD64.

[caution Whilst every effort is made to make HadesMem safe and rhobust, 
modifying the memory of another process is inherently dangerous and may impact 
the stability of the process being modified and potentially the system as a 
whole.]

[endsect] [/ Overview]

[section:lic License]

HadesMem is licensed under the Boost Software License. Dependencies are under 
their respective (different) licenses. Please respect all license agreements.

[pre Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
]

[endsect] [/ License]

[section:changes Changes]

[h3 v2.0.0]

[*New Features]

[*Bug Fixes]

[*Changes]

[h3 v1.6.0]

[*New Features]

* Added new `Patcher` APIs.

[*Bug Fixes]

[*Changes]

* Boost is no longer included as part of HadesMem. Please read the updated 
build instructions.
* Removed some unused build scripts and tweaked the GCC scripts. (Again, 
please check the updated build instructions again.)
* Marked the GCC support as 'experimental' as MinGW seems spotty at best.
* Compiler detection is now done using Boost.Build rather than preprocessor 
checks. This means that the header layout of the project can be improved and 
some include dependencies can be removed.
* Updated QuickBook binary.
* Updated AsmJit.
* Updated BeaEngine.

[h3 v1.5.0]

[*New Features]

* Added new `FindPattern` APIs.
* Added `Export::IsForwardedByOrdinal` and `Export::GetForwarderOrdinal`.
* Added `MemoryMgr::Call` overload to support calling multiple functions from 
the same thread.

[*Bug Fixes]

* Fixed build process.
* Fixed bug in MemoryMgr::CanRead, MemoryMgr::CanWrite, and 
MemoryMgr::CanExecute that was causing failures in Region unit tests. Attempts 
to read/write/execute memory marked as MEM_RESERVE (and not MEM_COMMIT) will 
fail, so check it explicitly.
* Support API Set Schema redirection in `ManualMap`. Fixes various failures 
under Windows 7.
* Various minor bug fixes to `ManualMap`.
* `ManualMap` now attempts to load modules at their preferred base address. 
Fixes some issues with images without relocation data.
* `ManualMap` now bumps the load count of dependent modules. Fixes rare issue 
where dependent module is unloaded by target application.
* `ManualMap` now correctly writes the entire PE headers to memory rather than 
just selected structures.
* `ManualMap` now implements correct path resolution (minus manifest/sxs 
redirection).
* `ManualMap` now calls TLS callbacks from the same thread as the EP.
* `ManualMap` now validates the OS version, machine type, etc of modules 
before attempting to map them.
* `Process` was incorrectly allowing x64 processes to open x86 processes. This 
is something I would like to support, but it will require rewrites to some of 
the base components for it to work in a bug-free manner, and as such will 
probably not be implemented until v2.0.0 or later.
* `Process::SetWoW64` no longer causes a null function pointer call when 
the IsWoW64Process API cannot be found.

[*Changes]

* `ManualMap` now uses existing instances of DLLs loaded in the target where 
possible, rather than giving private copies of every module. Done because of 
stability issues when mapping certain system DLLs which can't be properly 
initialized more than once per process.
* Allow HadesMem to be built targetting Windows 2000 SP4. Please note that 
this platform is still not officially supported, I'm just making it an 
'unofficial' option.
* Refactored 'ManualMap'.

[h3 v1.4.0]

[*New Features]

* Added new `Region` APIs.
* Added name based constructor for `Export`.

[*Bug Fixes]

* Fixed handling of forwarded exports in `ManualMap`.
* Fixed case-sensitivity of module caching/detection in `ManualMap`.
* Fixes case where image contained bound imports and `ManualMap` 
stopped. Import bindings are now ignored and reprocessed manually.
* Fixed import processing to use the OriginalFirstThunk list for parsing, 
and the FirstThunk list for binding. Fixes x64 import processing.
* Fixed `Export::GetForwarderFunction`. Was incorrectly including the 
delimiter in the string.

[*Changes]

* All dependencies are now statically linked.
* `ManualMap` now manually maps all dependencies regardless of whether they 
already exist in the process or not. The only exception to this is NTDLL, which 
cannot be mapped twice due to conflicts when calling LdrInitializeThunk.
* Make `ManualMap` test target a more difficult module.
* Update Boost to latest trunk.
* Update BeaEngine to latest trunk.

[h3 v1.3.0]

[*New Features]

* Added new `Injector` APIs.
* Added new `PeLib` APIs.
  * `DosHeader`
  * `ExportDir`
  * `ImportDir`
  * `NtHeaders`
  * `PeFile`
  * `Section`
  * `TlsDir`
* Added experimental `ManualMap` API. Subject to change and availability, not 
for production use. Currently undocumented.
* Added experimental manual mapping example program.

[*Bug Fixes]

* Added missing headers to '''Memory.hpp'''.
* Fixed Boost build scripts.
* `MemoryMgr::ReadString`, `MemoryMgr::ReadList`, `MemoryMgr::WriteString`, 
and `MemoryMgr::WriteList` now support custom allocators and traits classes 
(where appliciable) for the containers passed as template arguments.

[*Changes]

* HadesMem is now licensed under the [@http://www.boost.org/LICENSE_1_0.txt 
Boost Software License]. This is a far more permissive license than the 
previous one (the GNU GPL v3). Please review the new license before use.
* Improved `Module` tests.
* Improved documentation.
* Updated Boost.
* Removed unnecessary template metaprogramming from `MemoryMgr::ReadString`, 
`MemoryMgr::ReadList`, `MemoryMgr::WriteString`, and `MemoryMgr::WriteList`. 
Now using static assertions instead.

[h3 v1.2.0]

[*New Features]

* Added `CreateProcess` overload for argument lists (to ensure correct 
quoting).
* Move support for `AllocAndFree`.

[*Bug Fixes]

* Ensure COM is initialized and cleaned up in `CreateProcess`.
* Fixed documentation for `HADES_VERSION_FULL_STRING`. Format is vXX.YY.ZZ, 
not vXXYYZZ.
* Fix critical bug causing problems opening processes other than the 
current process.

[*Changes]

[h3 v1.1.0]

[*New Features]

* Move support for `MemoryMgr`.
* Version macros.
* Documented copy/assignment/move constructors/operators for `MemoryMgr`.
* Added new `Module` APIs.

[*Bug Fixes]

* Fixed build scripts for users who did not have BJam installed in their 
%PATH%. This was a bug introduced when Boost.Build changed BJam's name to B2.

[*Changes]

* Improved compiler detection.
* Improved build scripts to allow architecture selection.
* Changed `MemoryMgr::Call` to use the new `Module` APIs for increased 
stability.
* Improved Boost build scripts to only build the libraries that are used 
by HadesMem. This results in a much faster build time.
* Updated Boost to latest trunk.
* Added build scripts for Intel. Please note that this platform is still 
unsupported (as per the documentation). The scripts are there so users can 
help with the porting process (as are the Clang scripts).

[h3 v1.0.0]

* Initial SemVer release. Currently the only API available is the MemoryMgr 
component, but it should remain stable from now on (until the next major 
version bump). New components will be added incrementally once stabilized.

[endsect] [/ Changes]

[section:building Building]

[endsect] [/ Building]

[section:reference Reference]

[endsect] [/ Reference]

[section:acknowledge Acknowledgements]

HadesMem would not be possible without the help of the following 
projects/people:

* [@http://code.google.com/p/asmjit/ AsmJit] - C++ library for ASM 'JITing'
* [@http://www.beaengine.org/ BeaEngine] - C library for binary disassembly
* [@http://www.boost.org/ Boost] - General purpose C++ libraries
* [@http://www.mmowned.com/forums/members/299012-xel.html Xel @ MMOwned] - 
Logo
* [@http://www.mmowned.com/ MMOwned] - Reverse Engineering and Programming 
Resource
* [@http://www.gamedeception.net/ Game Deception] - Reverse Engineering and 
Programming Resource

[endsect] [/ Acknowledgements]
